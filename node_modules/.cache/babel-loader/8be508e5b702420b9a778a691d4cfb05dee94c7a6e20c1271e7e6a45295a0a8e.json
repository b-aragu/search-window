{"ast":null,"code":"var _jsxFileName = \"/home/baragu/Documents/search window/src/components/SearchWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport sanityClient from \"@sanity/client\";\n\n// Initialize Sanity client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = sanityClient({\n  projectId: \"x98ssp32\",\n  // Replace with your Sanity project ID\n  dataset: \"production\",\n  // Dataset name\n  apiVersion: \"2021-08-31\",\n  // API version date\n  useCdn: true // Use CDN for faster response times\n});\nconst SearchWindow = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch from Sanity using GROQ\n  const fetchEntries = async searchQuery => {\n    const query = `*[_type in [\"dentalTopics\", \"faq\", \"articles\"] && (title match \"${searchQuery}*\" || question match \"${searchQuery}*\")]{\n      title,\n      question,\n      description,\n      content,\n      answer,\n      _id\n    }`;\n    const results = await client.fetch(query);\n    setResults(results);\n    return results;\n  };\n\n  // Function to fetch response from the LLM (e.g., OpenAI GPT-4)\n  const fetchFromLLM = async searchQuery => {\n    setLoading(true);\n    const response = await fetch(\"https://api.openai.com/v1/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4\",\n        prompt: `You are an AI assistant for dental health. Answer the following question: ${searchQuery}`,\n        max_tokens: 100\n      })\n    });\n    const data = await response.json();\n    setAiResponse(data.choices[0].text.trim());\n    setLoading(false);\n  };\n\n  // Handle the search input\n  const handleSearch = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    if (value.length > 0) {\n      const results = await fetchEntries(value);\n\n      // If no results are found in Sanity, pass the query to the LLM\n      if (results.length === 0) {\n        await fetchFromLLM(value);\n      } else {\n        setAiResponse(\"\"); // Clear AI response if Sanity has results\n      }\n    } else {\n      setResults([]);\n      setAiResponse(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center mt-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full max-w-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: handleSearch,\n        className: \"w-full p-4 border border-blue-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out hover:shadow-lg bg-blue-50\",\n        placeholder: \"Search dental topics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg\",\n        children: results.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"p-3 border-b border-gray-100 cursor-pointer hover:bg-blue-100 transition duration-300 ease-in-out\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.title || item.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 64\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.description || item.content || item.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)]\n        }, item._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 p-4 bg-gray-100 border border-gray-300 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"AI Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 43\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: aiResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading AI response...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchWindow, \"1DS23o+IMMxaS0GrPvBm7Lk5vno=\");\n_c = SearchWindow;\nexport default SearchWindow;\nvar _c;\n$RefreshReg$(_c, \"SearchWindow\");","map":{"version":3,"names":["React","useState","sanityClient","jsxDEV","_jsxDEV","client","projectId","dataset","apiVersion","useCdn","SearchWindow","_s","query","setQuery","results","setResults","aiResponse","setAiResponse","loading","setLoading","fetchEntries","searchQuery","fetch","fetchFromLLM","response","method","headers","Authorization","process","env","OPENAI_API_KEY","body","JSON","stringify","model","prompt","max_tokens","data","json","choices","text","trim","handleSearch","event","value","target","length","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","item","title","question","description","content","answer","_id","_c","$RefreshReg$"],"sources":["/home/baragu/Documents/search window/src/components/SearchWindow.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport sanityClient from \"@sanity/client\";\n\n// Initialize Sanity client\nconst client = sanityClient({\n  projectId: \"x98ssp32\", // Replace with your Sanity project ID\n  dataset: \"production\", // Dataset name\n  apiVersion: \"2021-08-31\", // API version date\n  useCdn: true, // Use CDN for faster response times\n});\n\nconst SearchWindow = () => {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch from Sanity using GROQ\n  const fetchEntries = async (searchQuery) => {\n    const query = `*[_type in [\"dentalTopics\", \"faq\", \"articles\"] && (title match \"${searchQuery}*\" || question match \"${searchQuery}*\")]{\n      title,\n      question,\n      description,\n      content,\n      answer,\n      _id\n    }`;\n\n    const results = await client.fetch(query);\n    setResults(results);\n    return results;\n  };\n\n  // Function to fetch response from the LLM (e.g., OpenAI GPT-4)\n  const fetchFromLLM = async (searchQuery) => {\n    setLoading(true);\n    const response = await fetch(\"https://api.openai.com/v1/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n      },\n      body: JSON.stringify({\n        model: \"gpt-4\",\n        prompt: `You are an AI assistant for dental health. Answer the following question: ${searchQuery}`,\n        max_tokens: 100,\n      }),\n    });\n    const data = await response.json();\n    setAiResponse(data.choices[0].text.trim());\n    setLoading(false);\n  };\n\n  // Handle the search input\n  const handleSearch = async (event) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    if (value.length > 0) {\n      const results = await fetchEntries(value);\n\n      // If no results are found in Sanity, pass the query to the LLM\n      if (results.length === 0) {\n        await fetchFromLLM(value);\n      } else {\n        setAiResponse(\"\"); // Clear AI response if Sanity has results\n      }\n    } else {\n      setResults([]);\n      setAiResponse(\"\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center mt-10\">\n      <div className=\"relative w-full max-w-lg\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleSearch}\n          className=\"w-full p-4 border border-blue-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out hover:shadow-lg bg-blue-50\"\n          placeholder=\"Search dental topics...\"\n        />\n        {results.length > 0 && (\n          <ul className=\"absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg\">\n            {results.map((item) => (\n              <li key={item._id} className=\"p-3 border-b border-gray-100 cursor-pointer hover:bg-blue-100 transition duration-300 ease-in-out\">\n                <strong>{item.title || item.question}</strong> <br />\n                <span>{item.description || item.content || item.answer}</span>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        {aiResponse && (\n          <div className=\"mt-4 p-4 bg-gray-100 border border-gray-300 rounded-lg shadow-md\">\n            <strong>AI Response:</strong> <br />\n            <p>{aiResponse}</p>\n          </div>\n        )}\n\n        {loading && <p>Loading AI response...</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}