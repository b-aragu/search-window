{"ast":null,"code":"var _jsxFileName = \"/home/baragu/Documents/search window/src/components/SearchWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport sanityClient from \"@sanity/client\";\nimport Groq from \"groq-sdk\";\n\n// Initialize Sanity client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = sanityClient({\n  projectId: \"x98ssp32\",\n  // Replace with your Sanity project ID\n  dataset: \"production\",\n  // Dataset name\n  apiVersion: \"2021-08-31\",\n  // API version date\n  useCdn: true // Use CDN for faster response times\n});\n\n// Initialize Groq client\nconst groq = new Groq({\n  apiKey: process.env.GROQ_API_KEY\n});\nconst SearchWindow = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch from Sanity using GROQ\n  const fetchEntries = async searchQuery => {\n    const query = `*[_type in [\"dentalTopics\", \"faq\", \"articles\"] && (title match \"${searchQuery}*\" || question match \"${searchQuery}*\")]{\n      title,\n      question,\n      description,\n      content,\n      answer,\n      _id\n    }`;\n    try {\n      const results = await client.fetch(query);\n      setResults(results);\n      return results;\n    } catch (error) {\n      console.error(\"Error fetching from Sanity:\", error);\n      return [];\n    }\n  };\n\n  // Function to fetch response from OpenAI GPT\n  const fetchFromOpenAI = async searchQuery => {\n    setLoading(true);\n    try {\n      var _data$choices, _data$choices$, _data$choices$$text;\n      const response = await fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          prompt: `You are an AI assistant for dental health. Answer the following question: ${searchQuery}`,\n          max_tokens: 100\n        })\n      });\n      const data = await response.json();\n      const aiText = ((_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$text = _data$choices$.text) === null || _data$choices$$text === void 0 ? void 0 : _data$choices$$text.trim()) || \"No valid response from AI.\";\n      setAiResponse(aiText);\n    } catch (error) {\n      console.error(\"Error fetching from OpenAI:\", error);\n      setAiResponse(\"Error fetching response from AI.\");\n    }\n    setLoading(false);\n  };\n\n  // Function to fetch response from Groq LLM\n  const fetchFromGroq = async searchQuery => {\n    setLoading(true);\n    try {\n      var _chatCompletion$choic, _chatCompletion$choic2, _chatCompletion$choic3;\n      const chatCompletion = await groq.chat.completions.create({\n        messages: [{\n          role: \"user\",\n          content: searchQuery\n        }],\n        model: \"mixtral-8x7b-32768\" // Example model\n      });\n      const aiText = (chatCompletion === null || chatCompletion === void 0 ? void 0 : (_chatCompletion$choic = chatCompletion.choices) === null || _chatCompletion$choic === void 0 ? void 0 : (_chatCompletion$choic2 = _chatCompletion$choic[0]) === null || _chatCompletion$choic2 === void 0 ? void 0 : (_chatCompletion$choic3 = _chatCompletion$choic2.message) === null || _chatCompletion$choic3 === void 0 ? void 0 : _chatCompletion$choic3.content) || \"No valid response from Groq.\";\n      setAiResponse(aiText);\n    } catch (error) {\n      console.error(\"Error from Groq:\", error);\n      setAiResponse(\"Error fetching response from Groq.\");\n    }\n    setLoading(false);\n  };\n\n  // Choose which LLM to use based on API keys\n  const fetchLLMResponse = async searchQuery => {\n    if (process.env.GROQ_API_KEY) {\n      await fetchFromGroq(searchQuery); // Use Groq if API key is available\n    } else if (process.env.OPENAI_API_KEY) {\n      await fetchFromOpenAI(searchQuery); // Fallback to OpenAI if no Groq API key\n    } else {\n      setAiResponse(\"No AI service available.\");\n    }\n  };\n\n  // Handle the search input\n  const handleSearch = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    if (value.length > 0) {\n      const results = await fetchEntries(value);\n\n      // If no results are found in Sanity, pass the query to the LLM\n      if (results.length === 0) {\n        await fetchLLMResponse(value);\n      } else {\n        setAiResponse(\"\"); // Clear AI response if Sanity has results\n      }\n    } else {\n      setResults([]);\n      setAiResponse(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center mt-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full max-w-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: handleSearch,\n        className: \"w-full p-4 border border-blue-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out hover:shadow-lg bg-blue-50\",\n        placeholder: \"Search dental topics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg\",\n        children: results.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"p-3 border-b border-gray-100 cursor-pointer hover:bg-blue-100 transition duration-300 ease-in-out\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.title || item.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 64\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.description || item.content || item.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this)]\n        }, item._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 p-4 bg-gray-100 border border-gray-300 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"AI Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 43\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: aiResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading AI response...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchWindow, \"1DS23o+IMMxaS0GrPvBm7Lk5vno=\");\n_c = SearchWindow;\nexport default SearchWindow;\nvar _c;\n$RefreshReg$(_c, \"SearchWindow\");","map":{"version":3,"names":["React","useState","sanityClient","Groq","jsxDEV","_jsxDEV","client","projectId","dataset","apiVersion","useCdn","groq","apiKey","process","env","GROQ_API_KEY","SearchWindow","_s","query","setQuery","results","setResults","aiResponse","setAiResponse","loading","setLoading","fetchEntries","searchQuery","fetch","error","console","fetchFromOpenAI","_data$choices","_data$choices$","_data$choices$$text","response","method","headers","Authorization","OPENAI_API_KEY","body","JSON","stringify","model","prompt","max_tokens","data","json","aiText","choices","text","trim","fetchFromGroq","_chatCompletion$choic","_chatCompletion$choic2","_chatCompletion$choic3","chatCompletion","chat","completions","create","messages","role","content","message","fetchLLMResponse","handleSearch","event","value","target","length","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","item","title","question","description","answer","_id","_c","$RefreshReg$"],"sources":["/home/baragu/Documents/search window/src/components/SearchWindow.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport sanityClient from \"@sanity/client\";\nimport Groq from \"groq-sdk\";\n\n// Initialize Sanity client\nconst client = sanityClient({\n  projectId: \"x98ssp32\", // Replace with your Sanity project ID\n  dataset: \"production\", // Dataset name\n  apiVersion: \"2021-08-31\", // API version date\n  useCdn: true, // Use CDN for faster response times\n});\n\n// Initialize Groq client\nconst groq = new Groq({ apiKey: process.env.GROQ_API_KEY });\n\nconst SearchWindow = () => {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch from Sanity using GROQ\n  const fetchEntries = async (searchQuery) => {\n    const query = `*[_type in [\"dentalTopics\", \"faq\", \"articles\"] && (title match \"${searchQuery}*\" || question match \"${searchQuery}*\")]{\n      title,\n      question,\n      description,\n      content,\n      answer,\n      _id\n    }`;\n\n    try {\n      const results = await client.fetch(query);\n      setResults(results);\n      return results;\n    } catch (error) {\n      console.error(\"Error fetching from Sanity:\", error);\n      return [];\n    }\n  };\n\n  // Function to fetch response from OpenAI GPT\n  const fetchFromOpenAI = async (searchQuery) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          prompt: `You are an AI assistant for dental health. Answer the following question: ${searchQuery}`,\n          max_tokens: 100,\n        }),\n      });\n\n      const data = await response.json();\n      const aiText = data.choices?.[0]?.text?.trim() || \"No valid response from AI.\";\n      setAiResponse(aiText);\n    } catch (error) {\n      console.error(\"Error fetching from OpenAI:\", error);\n      setAiResponse(\"Error fetching response from AI.\");\n    }\n    setLoading(false);\n  };\n\n  // Function to fetch response from Groq LLM\n  const fetchFromGroq = async (searchQuery) => {\n    setLoading(true);\n    try {\n      const chatCompletion = await groq.chat.completions.create({\n        messages: [\n          {\n            role: \"user\",\n            content: searchQuery,\n          },\n        ],\n        model: \"mixtral-8x7b-32768\", // Example model\n      });\n\n      const aiText = chatCompletion?.choices?.[0]?.message?.content || \"No valid response from Groq.\";\n      setAiResponse(aiText);\n    } catch (error) {\n      console.error(\"Error from Groq:\", error);\n      setAiResponse(\"Error fetching response from Groq.\");\n    }\n    setLoading(false);\n  };\n\n  // Choose which LLM to use based on API keys\n  const fetchLLMResponse = async (searchQuery) => {\n    if (process.env.GROQ_API_KEY) {\n      await fetchFromGroq(searchQuery); // Use Groq if API key is available\n    } else if (process.env.OPENAI_API_KEY) {\n      await fetchFromOpenAI(searchQuery); // Fallback to OpenAI if no Groq API key\n    } else {\n      setAiResponse(\"No AI service available.\");\n    }\n  };\n\n  // Handle the search input\n  const handleSearch = async (event) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    if (value.length > 0) {\n      const results = await fetchEntries(value);\n\n      // If no results are found in Sanity, pass the query to the LLM\n      if (results.length === 0) {\n        await fetchLLMResponse(value);\n      } else {\n        setAiResponse(\"\"); // Clear AI response if Sanity has results\n      }\n    } else {\n      setResults([]);\n      setAiResponse(\"\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center mt-10\">\n      <div className=\"relative w-full max-w-lg\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleSearch}\n          className=\"w-full p-4 border border-blue-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out hover:shadow-lg bg-blue-50\"\n          placeholder=\"Search dental topics...\"\n        />\n        {results.length > 0 && (\n          <ul className=\"absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg\">\n            {results.map((item) => (\n              <li key={item._id} className=\"p-3 border-b border-gray-100 cursor-pointer hover:bg-blue-100 transition duration-300 ease-in-out\">\n                <strong>{item.title || item.question}</strong> <br />\n                <span>{item.description || item.content || item.answer}</span>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        {aiResponse && (\n          <div className=\"mt-4 p-4 bg-gray-100 border border-gray-300 rounded-lg shadow-md\">\n            <strong>AI Response:</strong> <br />\n            <p>{aiResponse}</p>\n          </div>\n        )}\n\n        {loading && <p>Loading AI response...</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}