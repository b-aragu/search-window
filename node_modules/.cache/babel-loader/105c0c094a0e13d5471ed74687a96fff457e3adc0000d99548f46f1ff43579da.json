{"ast":null,"code":"const e = !(typeof navigator > \"u\") && \"ReactNative\" === navigator.product,\n  t = {\n    timeout: e ? 6e4 : 12e4\n  },\n  r = function (r) {\n    const a = {\n      ...t,\n      ...(\"string\" == typeof r ? {\n        url: r\n      } : r)\n    };\n    if (a.timeout = n(a.timeout), a.query) {\n      const {\n        url: t,\n        searchParams: r\n      } = function (t) {\n        const r = t.indexOf(\"?\");\n        if (-1 === r) return {\n          url: t,\n          searchParams: new URLSearchParams()\n        };\n        const n = t.slice(0, r),\n          a = t.slice(r + 1);\n        if (!e) return {\n          url: n,\n          searchParams: new URLSearchParams(a)\n        };\n        if (\"function\" != typeof decodeURIComponent) throw new Error(\"Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined\");\n        const s = new URLSearchParams();\n        for (const e of a.split(\"&\")) {\n          const [t, r] = e.split(\"=\");\n          t && s.append(o(t), o(r || \"\"));\n        }\n        return {\n          url: n,\n          searchParams: s\n        };\n      }(a.url);\n      for (const [e, o] of Object.entries(a.query)) {\n        if (void 0 !== o) if (Array.isArray(o)) for (const t of o) r.append(e, t);else r.append(e, o);\n        const n = r.toString();\n        n && (a.url = `${t}?${n}`);\n      }\n    }\n    return a.method = a.body && !a.method ? \"POST\" : (a.method || \"GET\").toUpperCase(), a;\n  };\nfunction o(e) {\n  return decodeURIComponent(e.replace(/\\+/g, \" \"));\n}\nfunction n(e) {\n  if (!1 === e || 0 === e) return !1;\n  if (e.connect || e.socket) return e;\n  const r = Number(e);\n  return isNaN(r) ? n(t.timeout) : {\n    connect: r,\n    socket: r\n  };\n}\nconst a = /^https?:\\/\\//i,\n  s = function (e) {\n    if (!a.test(e.url)) throw new Error(`\"${e.url}\" is not a valid URL`);\n  };\nfunction c(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nexport { c as g, r as p, s as v };","map":{"version":3,"names":["e","navigator","product","t","timeout","r","processOptions","a","url","n","query","searchParams","indexOf","URLSearchParams","slice","decodeURIComponent","Error","s","split","append","o","Object","entries","Array","isArray","toString","method","body","toUpperCase","replace","connect","socket","Number","isNaN","validateOptions","test","c","__esModule","prototype","hasOwnProperty","call","default","g","p","v"],"sources":["/home/baragu/Documents/search window/node_modules/get-it/src/middleware/defaultOptionsProcessor.ts","/home/baragu/Documents/search window/node_modules/get-it/src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from 'get-it'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    const {url, searchParams} = splitUrl(options.url)\n\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n\n      // Merge back params into url\n      const search = searchParams.toString()\n      if (search) {\n        options.url = `${url}?${search}`\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\n/**\n * Given a string URL, extracts the query string and URL from each other, and returns them.\n * Note that we cannot use the `URL` constructor because of old React Native versions which are\n * majorly broken and returns incorrect results:\n *\n * (`new URL('http://foo/?a=b').toString()` == 'http://foo/?a=b/')\n */\nfunction splitUrl(url: string): {url: string; searchParams: URLSearchParams} {\n  const qIndex = url.indexOf('?')\n  if (qIndex === -1) {\n    return {url, searchParams: new URLSearchParams()}\n  }\n\n  const base = url.slice(0, qIndex)\n  const qs = url.slice(qIndex + 1)\n\n  // React Native's URL and URLSearchParams are broken, so passing a string to URLSearchParams\n  // does not work, leading to an empty query string. For other environments, this should be enough\n  if (!isReactNative) {\n    return {url: base, searchParams: new URLSearchParams(qs)}\n  }\n\n  // Sanity-check; we do not know of any environment where this is the case,\n  // but if it is, we should not proceed without giving a descriptive error\n  if (typeof decodeURIComponent !== 'function') {\n    throw new Error(\n      'Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined',\n    )\n  }\n\n  const params = new URLSearchParams()\n  for (const pair of qs.split('&')) {\n    const [key, value] = pair.split('=')\n    if (key) {\n      params.append(decodeQueryParam(key), decodeQueryParam(value || ''))\n    }\n  }\n\n  return {url: base, searchParams: params}\n}\n\nfunction decodeQueryParam(value: string): string {\n  return decodeURIComponent(value.replace(/\\+/g, ' '))\n}\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from 'get-it'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}